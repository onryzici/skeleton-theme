{% comment %}
  Video Showcase Section
  Features tabbed interface with full-width video and text overlay
{% endcomment %}

<style>
  /* Header Animation */
  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  #shopify-section-{{ section.id }} .vs-header {
    animation: fadeInDown 0.6s ease forwards;
  }

  @media (min-width: 1024px) {
    #shopify-section-{{ section.id }} .video-showcase {
      padding-top: {{ section.settings.padding_top_desktop }}px !important;
      padding-bottom: {{ section.settings.padding_bottom_desktop }}px !important;
    }
  }
</style>

<div class="video-showcase bg-white" style="padding-top: {{ section.settings.padding_top_mobile }}px; padding-bottom: {{ section.settings.padding_bottom_mobile }}px;">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

    {% comment %} Header {% endcomment %}
    <div class="vs-header text-center mb-8 lg:mb-12">
      {% if section.settings.heading != blank %}
        <h2 class="text-3xl lg:text-5xl font-bold font-sans text-gray-900 mb-4">
          {{ section.settings.heading }}
        </h2>
      {% endif %}

      {% if section.settings.subheading != blank %}
        <p class="text-base lg:text-lg font-sans text-gray-600 max-w-2xl mx-auto mb-12">
          {{ section.settings.subheading }}
        </p>
      {% endif %}

      {% comment %} Divider {% endcomment %}
      <div class="w-full max-w-7xl h-px bg-gray-200 mx-auto my-12"></div>
    </div>

    {% comment %} Tabs {% endcomment %}
    <div class="flex justify-center mb-8 lg:mb-12">
      <div class="inline-flex flex-wrap justify-center gap-3 lg:gap-6">
        {% for block in section.blocks %}
          <button
            type="button"
            class="video-tab px-4 py-2 text-sm lg:text-base font-medium font-sans text-gray-600 transition-colors duration-200 {% if forloop.first %}text-gray-900 border-b-2 border-gray-900{% else %}border-b-2 border-transparent hover:text-gray-900{% endif %}"
            data-tab="{{ block.id }}"
            data-video-external="{{ block.settings.video_external }}"
            data-video-file="{{ block.settings.video_file }}"
            data-video-url="{{ block.settings.video_url }}"
            data-poster="{{ block.settings.poster_image | image_url: width: 1200 }}"
          >
            {{ block.settings.tab_title }}
          </button>
        {% endfor %}
      </div>
    </div>

    {% comment %} Video Container {% endcomment %}
    <div class="relative w-full aspect-video bg-black rounded-2xl overflow-hidden">

    {% comment %} Video Element {% endcomment %}
    {% if section.blocks.first.settings.video_external != blank %}
      {% comment %} External Video (YouTube/Vimeo) {% endcomment %}
      <div id="external-video-container" class="absolute inset-0 w-full h-full">
        {{ section.blocks.first.settings.video_external | video_tag:
          image_size: '1100x',
          loop: true,
          controls: false,
          muted: true,
          autoplay: true,
          class: 'w-full h-full object-contain'
        }}
      </div>
    {% else %}
      {% comment %} Self-hosted Video {% endcomment %}
      <video
        id="showcase-video"
        class="absolute inset-0 w-full h-full object-contain transition-opacity duration-500"
        playsinline
        muted
        loop
        preload="metadata"
        data-autoplay="true"
      >
        {% if section.blocks.first.settings.video_file != blank %}
          <source src="{{ section.blocks.first.settings.video_file }}" type="video/mp4">
        {% elsif section.blocks.first.settings.video_url != blank %}
          <source src="{{ section.blocks.first.settings.video_url }}" type="video/mp4">
        {% endif %}
      </video>
    {% endif %}

    {% comment %} Video Poster/Overlay - Only shown before first play {% endcomment %}
    <div id="video-overlay" class="absolute inset-0 bg-black/30 transition-opacity duration-500 opacity-0 pointer-events-none">
      {% if section.blocks.first.settings.poster_image != blank %}
        {% assign poster_image = section.blocks.first.settings.poster_image %}
        <img
          src="{{ poster_image | image_url: width: 1200 }}"
          alt="Video preview"
          width="{{ poster_image.width }}"
          height="{{ poster_image.height }}"
          class="w-full h-full object-contain"
          loading="lazy"
        >
      {% endif %}
    </div>

    {% comment %} Minimal Play/Pause Button - Bottom Right {% endcomment %}
    <button
      type="button"
      id="video-control-btn"
      class="absolute bottom-4 right-4 w-10 h-10 lg:w-12 lg:h-12 bg-white/80 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg hover:bg-white hover:scale-105 transition-all duration-200 z-10 opacity-80 hover:opacity-100"
      aria-label="Play video"
    >
      <svg id="play-icon" class="w-4 h-4 lg:w-5 lg:h-5 text-gray-900 ml-0.5 hidden" fill="currentColor" viewBox="0 0 20 20">
        <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"/>
      </svg>
      <svg id="pause-icon" class="w-4 h-4 lg:w-5 lg:h-5 text-gray-900" fill="currentColor" viewBox="0 0 20 20">
        <path d="M5.75 3a.75.75 0 00-.75.75v12.5c0 .414.336.75.75.75h1.5a.75.75 0 00.75-.75V3.75A.75.75 0 007.25 3h-1.5zM12.75 3a.75.75 0 00-.75.75v12.5c0 .414.336.75.75.75h1.5a.75.75 0 00.75-.75V3.75a.75.75 0 00-.75-.75h-1.5z"/>
      </svg>
    </button>

    {% comment %} Loading Spinner {% endcomment %}
    <div id="video-loading" class="absolute inset-0 bg-black/50 flex items-center justify-center hidden z-20 transition-opacity duration-300">
      <div class="w-10 h-10 border-3 border-white/30 border-t-white rounded-full animate-spin"></div>
    </div>

    </div>
  </div>
</div>

<script>
(function() {
  const video = document.getElementById('showcase-video');
  const externalVideoContainer = document.getElementById('external-video-container');
  const controlBtn = document.getElementById('video-control-btn');
  const playIcon = document.getElementById('play-icon');
  const pauseIcon = document.getElementById('pause-icon');
  const videoOverlay = document.getElementById('video-overlay');
  const videoLoading = document.getElementById('video-loading');
  const tabs = document.querySelectorAll('.video-tab');

  let isPlaying = false;
  let isExternalVideo = !!externalVideoContainer;
  let currentVideoUrl = video?.querySelector('source')?.src || '';
  let hasLoadedOnce = false;

  // Intersection Observer for lazy loading with autoplay
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting && !hasLoadedOnce) {
        hasLoadedOnce = true;
        if (video && currentVideoUrl) {
          loadAndPlayVideo(currentVideoUrl);
        }
      }
    });
  }, { threshold: 0.25 });

  if (video) {
    observer.observe(video);
  }

  // Load and autoplay video
  function loadAndPlayVideo(url) {
    if (!url || !video) return;

    videoLoading.classList.remove('hidden');
    video.style.opacity = '0';

    const source = video.querySelector('source');
    if (source) {
      source.src = url;
    }

    video.load();

    // Auto play after load
    video.addEventListener('loadeddata', function playOnLoad() {
      videoLoading.classList.add('hidden');

      // Fade in video
      setTimeout(() => {
        video.style.opacity = '1';
      }, 100);

      // Autoplay
      video.play().then(() => {
        isPlaying = true;
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
      }).catch(() => {
        // Autoplay failed (browser restriction)
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
      });

      video.removeEventListener('loadeddata', playOnLoad);
    });
  }

  // Play/Pause control
  controlBtn?.addEventListener('click', () => {
    // For external videos
    if (externalVideoContainer) {
      return; // External videos autoplay, control handled by platform
    }

    // For self-hosted videos
    if (video) {
      if (isPlaying) {
        video.pause();
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
        isPlaying = false;
      } else {
        video.play().then(() => {
          playIcon.classList.add('hidden');
          pauseIcon.classList.remove('hidden');
          isPlaying = true;
        });
      }
    }
  });

  // Video events
  video?.addEventListener('play', () => {
    playIcon.classList.add('hidden');
    pauseIcon.classList.remove('hidden');
    isPlaying = true;
  });

  video?.addEventListener('pause', () => {
    playIcon.classList.remove('hidden');
    pauseIcon.classList.add('hidden');
    isPlaying = false;
  });

  // Tab switching with smooth transitions
  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const videoExternal = tab.dataset.videoExternal;
      const videoFile = tab.dataset.videoFile;
      const videoUrl = tab.dataset.videoUrl;

      // Determine which video source to use
      const newVideoUrl = videoFile || videoUrl;
      const hasExternalVideo = videoExternal && videoExternal !== '';

      // Update active tab with animation
      tabs.forEach(t => {
        t.classList.remove('text-gray-900', 'border-gray-900');
        t.classList.add('text-gray-600', 'border-transparent');
      });
      tab.classList.add('text-gray-900', 'border-gray-900');
      tab.classList.remove('text-gray-600', 'border-transparent');

      // Change video with fade transition
      if (!hasExternalVideo && newVideoUrl && newVideoUrl !== currentVideoUrl && video) {
        // Fade out current video
        video.style.opacity = '0';
        videoLoading.classList.remove('hidden');

        setTimeout(() => {
          currentVideoUrl = newVideoUrl;
          video.pause();

          // Update source
          const source = video.querySelector('source');
          if (source) {
            source.src = newVideoUrl;
          }

          video.load();

          // Fade in and autoplay new video
          video.addEventListener('loadeddata', function fadeInAndPlay() {
            videoLoading.classList.add('hidden');

            setTimeout(() => {
              video.style.opacity = '1';
            }, 100);

            video.play().then(() => {
              isPlaying = true;
              playIcon.classList.add('hidden');
              pauseIcon.classList.remove('hidden');
            }).catch(() => {
              playIcon.classList.remove('hidden');
              pauseIcon.classList.add('hidden');
            });

            video.removeEventListener('loadeddata', fadeInAndPlay);
          });
        }, 500); // Wait for fade out
      }
    });
  });
})();
</script>

{% schema %}
{
  "name": "Video Showcase",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Work smarter, not harder"
    },
    {
      "type": "textarea",
      "id": "subheading",
      "label": "Subheading",
      "default": "Personalized AI note-taking enhances your productivity"
    },
    {
      "type": "header",
      "content": "Section Padding"
    },
    {
      "type": "range",
      "id": "padding_top_mobile",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding (mobile)",
      "default": 64
    },
    {
      "type": "range",
      "id": "padding_bottom_mobile",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding (mobile)",
      "default": 64
    },
    {
      "type": "range",
      "id": "padding_top_desktop",
      "min": 0,
      "max": 152,
      "step": 4,
      "unit": "px",
      "label": "Top padding (desktop)",
      "default": 96
    },
    {
      "type": "range",
      "id": "padding_bottom_desktop",
      "min": 0,
      "max": 152,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding (desktop)",
      "default": 96
    }
  ],
  "blocks": [
    {
      "type": "tab",
      "name": "Video Tab",
      "settings": [
        {
          "type": "text",
          "id": "tab_title",
          "label": "Tab title",
          "default": "Feature",
          "info": "Name of the tab (e.g., 'One-Press Record', 'Voice-to-Text')"
        },
        {
          "type": "header",
          "content": "Video Settings"
        },
        {
          "type": "paragraph",
          "content": "Choose one option below. Videos will autoplay when section loads (muted). Recommended: Upload to Settings > Files for best performance."
        },
        {
          "type": "video_url",
          "id": "video_external",
          "label": "Option 1: YouTube/Vimeo",
          "accept": ["youtube", "vimeo"],
          "info": "Paste YouTube or Vimeo URL - easiest option"
        },
        {
          "type": "url",
          "id": "video_file",
          "label": "Option 2: Uploaded video (Recommended)",
          "info": "Go to Settings > Files, upload video, copy URL and paste here"
        },
        {
          "type": "url",
          "id": "video_url",
          "label": "Option 3: Direct URL",
          "info": "Direct link to .mp4 file"
        },
        {
          "type": "image_picker",
          "id": "poster_image",
          "label": "Video thumbnail (optional)",
          "info": "Shown briefly before video loads"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Video Showcase",
      "blocks": [
        {
          "type": "tab",
          "settings": {
            "tab_title": "One-Press Record"
          }
        },
        {
          "type": "tab",
          "settings": {
            "tab_title": "Voice-to-Text Transcription"
          }
        },
        {
          "type": "tab",
          "settings": {
            "tab_title": "AI Summarization"
          }
        }
      ]
    }
  ]
}
{% endschema %}
